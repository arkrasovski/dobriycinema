/* tslint:disable */
/* eslint-disable */
/**
 * Film weekly service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Film,
    FilmFromJSON,
    FilmToJSON,
    FilmEvent,
    FilmEventFromJSON,
    FilmEventToJSON,
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface MapRequest {
    date?: string;
}

export interface RatefilmRequest {
    date?: string;
}

export interface RecommendationsRequest {
    date?: string;
}

export interface UserRequest {
    date?: string;
}

export interface WeeklyeventsRequest {
    date?: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Returns list of musical city musicevents
     */
    async mapRaw(requestParameters: MapRequest): Promise<runtime.ApiResponse<Array<any>>> {
        const queryParameters: any = {};

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = requestParameters.date;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/map`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns list of musical city musicevents
     */
    async map(requestParameters: MapRequest): Promise<Array<any>> {
        const response = await this.mapRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns list of ratefilm decription
     */
    async ratefilmRaw(requestParameters: RatefilmRequest): Promise<runtime.ApiResponse<Array<Film>>> {
        const queryParameters: any = {};

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = requestParameters.date;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ratefilm`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FilmFromJSON));
    }

    /**
     * Returns list of ratefilm decription
     */
    async ratefilm(requestParameters: RatefilmRequest): Promise<Array<Film>> {
        const response = await this.ratefilmRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns list of recommendations films
     */
    async recommendationsRaw(requestParameters: RecommendationsRequest): Promise<runtime.ApiResponse<Array<Film>>> {
        const queryParameters: any = {};

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = requestParameters.date;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/recommendations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FilmFromJSON));
    }

    /**
     * Returns list of recommendations films
     */
    async recommendations(requestParameters: RecommendationsRequest): Promise<Array<Film>> {
        const response = await this.recommendationsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns list of musical city musicevents
     */
    async userRaw(requestParameters: UserRequest): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: any = {};

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = requestParameters.date;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     * Returns list of musical city musicevents
     */
    async user(requestParameters: UserRequest): Promise<Array<User>> {
        const response = await this.userRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns list of cinemas films
     */
    async weeklyeventsRaw(requestParameters: WeeklyeventsRequest): Promise<runtime.ApiResponse<Array<FilmEvent>>> {
        const queryParameters: any = {};

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = requestParameters.date;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/weekly`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FilmEventFromJSON));
    }

    /**
     * Returns list of cinemas films
     */
    async weeklyevents(requestParameters: WeeklyeventsRequest): Promise<Array<FilmEvent>> {
        const response = await this.weeklyeventsRaw(requestParameters);
        return await response.value();
    }

}
